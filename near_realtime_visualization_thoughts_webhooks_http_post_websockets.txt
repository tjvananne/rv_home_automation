
Building real time data visualization of my temperature sensor:

Concept of the day: WEBHOOKS

API: when you need to pull data from a resource
WEBHOOKS: when you need data pushed to you when an event happens
- aka: "reverse API"

I think we can combine HTTP POST / webhooks / websockets to create some interesting near-real-time patterns for displaying the temperature data from my RV.

Potential resources:

# Python tornado websockets with d3.js visualization - interesting...
- https://medium.com/@benjaminmbrown/real-time-data-visualization-with-d3-crossfilter-and-websockets-in-python-tutorial-dba5255e7f0e

# this SO post makes leads me to some interesting thoughts...
- https://stackoverflow.com/questions/63099518/sending-a-websocket-message-from-a-post-request-handler-in-express
-- I need to learn more about web hooks
-- I think a web hook is an API that can convert a POST http req to a websocket.send()?
--- if that isn't what it is, then I want what I said lol

# let's figure out exactly what a web hook is:
# Clearly there's some SEO competition for this question....
- https://sendgrid.com/blog/whats-webhook/
-- "A webhook (also called a web callback or HTTP push API) is a way for an app to provide other applications with real-time information. A webhook delivers data to other applications as it happens, meaning you get data immediately. Unlike typical APIs where you would need to poll for data very frequently in order to get it real-time. This makes webhooks much more efficient for both provider and consumer. The only drawback to webhooks is the difficulty of initially setting them up."
- https://www.twilio.com/docs/glossary/what-is-a-webhook
- https://zapier.com/blog/what-are-webhooks/


# ok so webhooks are sick; this will be super helpful for testing:
- https://webhook.site


so.. if I tell my hubitat device to push to www.taylorvananne.com:9000, I can have an HTTP server listening for POST requests there. I can then take that JSON associated with that POST command, and send it to a websocket at localhost:9001 (keep in mind, we're already on the www.taylorvananne.com server, so it's localhost now). THEN I can set up d3.js visualizations to update based on the data coming in from the websocket.




